// <auto-generated />
using System;
using MemeFolderN.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MemeFolderN.EntityFramework.Migrations
{
    [DbContext(typeof(MemeFolderNDbContext))]
    [Migration("20210811092037_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MemeFolderN.Core.Models.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatingDate = new DateTime(2021, 8, 11, 12, 20, 37, 27, DateTimeKind.Local).AddTicks(5270),
                            Position = 0L,
                            Title = "root"
                        });
                });

            modelBuilder.Entity("MemeFolderN.Core.Models.Meme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiniImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Memes");
                });

            modelBuilder.Entity("MemeFolderN.Core.Models.MemeTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MemeTags");
                });

            modelBuilder.Entity("MemeFolderN.Core.Models.MemeTagNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MemeTagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MemeId");

                    b.HasIndex("MemeTagId");

                    b.ToTable("MemeTagNodes");
                });

            modelBuilder.Entity("MemeFolderN.Core.Models.Folder", b =>
                {
                    b.HasOne("MemeFolderN.Core.Models.Folder", "ParentFolder")
                        .WithMany("Folders")
                        .HasForeignKey("ParentFolderId");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("MemeFolderN.Core.Models.Meme", b =>
                {
                    b.HasOne("MemeFolderN.Core.Models.Folder", "ParentFolder")
                        .WithMany("Memes")
                        .HasForeignKey("ParentFolderId");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("MemeFolderN.Core.Models.MemeTagNode", b =>
                {
                    b.HasOne("MemeFolderN.Core.Models.Meme", "Meme")
                        .WithMany("Tags")
                        .HasForeignKey("MemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemeFolderN.Core.Models.MemeTag", "MemeTag")
                        .WithMany()
                        .HasForeignKey("MemeTagId");

                    b.Navigation("Meme");

                    b.Navigation("MemeTag");
                });

            modelBuilder.Entity("MemeFolderN.Core.Models.Folder", b =>
                {
                    b.Navigation("Folders");

                    b.Navigation("Memes");
                });

            modelBuilder.Entity("MemeFolderN.Core.Models.Meme", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
