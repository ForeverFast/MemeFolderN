<Window x:Class="MemeFolderN.MFViews.Wpf.MFWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MemeFolderN.MFViews.Wpf"
        mc:Ignorable="d"
        d:DataContext="{d:DesignInstance vm:MFViewModel, IsDesignTimeCreatable=False}"
        xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes" 
        xmlns:ib="http://schemas.microsoft.com/xaml/behaviors"  
        xmlns:ssc="clr-namespace:LoadingSpinnerControl;assembly=LoadingSpinnerControl"
        xmlns:vm="clr-namespace:MemeFolderN.MFViewModels.Wpf;assembly=MemeFolderN.MFViewModels.Default"
        xmlns:behaviours="clr-namespace:MemeFolderN.MFViews.Wpf.Extentions"
        xmlns:routedCommands="clr-namespace:MemeFolderN.MFViewModels.Wpf.RoutedCommands;assembly=MemeFolderN.MFViewModels.Wpf"
        xmlns:propa="clr-namespace:MemeFolderN.MFViewModels.Common.Commands;assembly=MemeFolderN.MFViewModels.Common"
        xmlns:uib="clr-namespace:MemeFolderN.MFViews.Wpf.UserControlles.UIBlockerUC"
        xmlns:dd="urn:gong-wpf-dragdrop" 
        xmlns:mfbuttonuc="clr-namespace:MemeFolderN.MFViews.Wpf.UserControlles.MFButtonUC"
        Title="MFWindow"
        x:Name="MFWindowElement"
        Height="800" Width="1500"
        MinHeight="600" MinWidth="822"
        WindowStyle="SingleBorderWindow"
        WindowStartupLocation="CenterOwner">
    
    <Window.Style>
        <Style TargetType="{x:Type Window}">
            <Setter Property="WindowChrome.WindowChrome">
                <Setter.Value>
                    <WindowChrome CaptionHeight="35"
                                  CornerRadius="0"
                                  
                                  GlassFrameThickness="0"
                                  NonClientFrameEdges="None"
                                  ResizeBorderThickness="3"
                                  UseAeroCaptionButtons="True">

                    </WindowChrome>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Window}">
                        <Border BorderThickness="0,0,0,0">
                            <ContentPresenter x:Name="CP" Content="{TemplateBinding Content}" Grid.Row="1"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="WindowState" Value="Normal">
                                <Setter Property="Margin" TargetName="CP" Value="0"/>
                            </Trigger>
                            <Trigger Property="WindowState" Value="Maximized">
                                <Setter Property="Margin" TargetName="CP" Value="8,10,10,10"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>
    </Window.Style>

    <Window.Resources>
        <behaviours:TagCollectionViewSource
                                x:Key="root"
                                Source="{Binding Folders}"
                                Tag="null"
                                Filter="{x:Static behaviours:Handlers.OnChildrenNodeFilter}"/>
    </Window.Resources>
    
    <!--<ib:Interaction.Triggers>
        <ib:EventTrigger EventName="DataContextLoaded">
            <ib:InvokeCommandAction Command="{Binding MemeTagLoadCommand}" />
            <ib:InvokeCommandAction Command="{Binding FolderRootsCommand}" />
        </ib:EventTrigger>
    </ib:Interaction.Triggers>-->

    <Grid Background="{DynamicResource DimColor}">

        <propa:RoutedCommandBindings.RoutedCommandBindings>
            <!-- Folder -->
            <propa:RoutedCommandBinding Command="{Binding NavigationByFolderCommand}"
                                        RoutedCommand="{x:Static routedCommands:FolderRoutedCommands.NavigationByFolderRoutedCommand }"/>
            <propa:RoutedCommandBinding Command="{Binding FolderAddNonParametersCommand}"
                                        RoutedCommand="{x:Static routedCommands:FolderRoutedCommands.FolderAddNonParametersRoutedCommand }"/>
            <propa:RoutedCommandBinding Command="{Binding FolderAddCommand}"
                                        RoutedCommand="{x:Static routedCommands:FolderRoutedCommands.FolderAddRoutedCommand }"/>
            <propa:RoutedCommandBinding Command="{Binding FolderChangeCommand}"
                                        RoutedCommand="{x:Static routedCommands:FolderRoutedCommands.FolderChangeRoutedCommand }"/>
            <propa:RoutedCommandBinding Command="{Binding FolderDeleteCommand}"
                                        RoutedCommand="{x:Static routedCommands:FolderRoutedCommands.FolderDeleteRoutedCommand }"/>
            <!-- Meme -->
            <propa:RoutedCommandBinding Command="{Binding MemeAddNonParametersCommand}"
                                        RoutedCommand="{x:Static routedCommands:MemeRoutedCommands.MemeAddNonParametersRoutedCommand }"/>
            <propa:RoutedCommandBinding Command="{Binding MemeAddCommand}"
                                        RoutedCommand="{x:Static routedCommands:MemeRoutedCommands.MemeAddRoutedCommand }"/>
            <propa:RoutedCommandBinding Command="{Binding MemeChangeCommand}"
                                        RoutedCommand="{x:Static routedCommands:MemeRoutedCommands.MemeChangeRoutedCommand }"/>
            <propa:RoutedCommandBinding Command="{Binding MemeDeleteCommand}"
                                        RoutedCommand="{x:Static routedCommands:MemeRoutedCommands.MemeDeleteRoutedCommand }"/>
            <propa:RoutedCommandBinding Command="{Binding MemeDeleteTagCommand}"
                                        RoutedCommand="{x:Static routedCommands:MemeRoutedCommands.MemeDeleteTagRoutedCommand }"/>
            <propa:RoutedCommandBinding Command="{Binding MemeOpenCommand}"
                                        RoutedCommand="{x:Static routedCommands:MemeRoutedCommands.MemeOpenRoutedCommand }"/>
            <propa:RoutedCommandBinding Command="{Binding MemeOpenInExplorerCommand}"
                                        RoutedCommand="{x:Static routedCommands:MemeRoutedCommands.MemeOpenInExplorerRoutedCommand }"/>
            <propa:RoutedCommandBinding Command="{Binding MemeCopyCommand}"
                                        RoutedCommand="{x:Static routedCommands:MemeRoutedCommands.MemeCopyRoutedCommand }"/>
            <!-- MemeTags -->
            <propa:RoutedCommandBinding Command="{Binding NavigationByMemeTagCommand}"
                                        RoutedCommand="{x:Static routedCommands:MemeTagRoutedCommands.NavigationByMemeTagRoutedCommand }"/>
            <propa:RoutedCommandBinding Command="{Binding MemeTagAddCommand}"
                                        RoutedCommand="{x:Static routedCommands:MemeTagRoutedCommands.MemeTagAddRoutedCommand }"/>
            <propa:RoutedCommandBinding Command="{Binding MemeTagChangeCommand}"
                                        RoutedCommand="{x:Static routedCommands:MemeTagRoutedCommands.MemeTagChangeRoutedCommand }"/>
            <propa:RoutedCommandBinding Command="{Binding MemeTagDeleteCommand}"
                                        RoutedCommand="{x:Static routedCommands:MemeTagRoutedCommands.MemeTagDeleteRoutedCommand }"/>
        </propa:RoutedCommandBindings.RoutedCommandBindings>

        <Grid.RowDefinitions>
            <RowDefinition Height="40"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="30" />
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="300"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>

        
        
        <Grid x:Name="ContentGrid" Grid.Row="1" Grid.Column="1"
              Background="{DynamicResource GrayLVL3}">

            <!--<ssc:LoadingSpinner IsLoading="{Binding IsBusy, UpdateSourceTrigger=PropertyChanged}"
                                Color="AliceBlue"/>-->

            <ContentControl x:Name="MFContent"
                            Margin="0,0,0,0" 
                            BorderThickness="0,0,0,0"/>
        </Grid>

        <Border x:Name="HeaderGrid" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3"
                BorderBrush="{DynamicResource GrayLVL0}"
                BorderThickness="0,0,0,0.25">

            <Grid Background="{DynamicResource GrayLVL4}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="300"/>
                    <ColumnDefinition Width="80"/>
                    <ColumnDefinition Width="*" MinWidth="180"/>
                    <ColumnDefinition Width="2*" />
                </Grid.ColumnDefinitions>

                <Grid Grid.Column="0" Background="{x:Null}">
                    <!--<TextBox Text="{Binding SystemMessage, StringFormat=Системное сообщение: {0}}" x:Name="SM"
                             Foreground="{DynamicResource StandartLightColor2}"
                             FontSize="12"
                             VerticalAlignment="Center"
                             HorizontalAlignment="Center"
                             Opacity="0">

                        <TextBox.Triggers>
                            <EventTrigger RoutedEvent="{x:Static TextBox.TextChangedEvent}">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="1"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </TextBox.Triggers>
                    </TextBox>-->

                </Grid>

                <Grid Grid.Column="1" Background="{x:Null}">
                    <StackPanel Orientation="Horizontal">
                        <Button WindowChrome.IsHitTestVisibleInChrome="True"                                            
                            Command="{Binding NavigationBackCommand}"
                            Style="{StaticResource NavigationBack}"/>

                        <Button WindowChrome.IsHitTestVisibleInChrome="True"      
                            Command="{Binding NavigationForwardCommand}"
                            Style="{StaticResource NavigationForward}"/>
                    </StackPanel>
                </Grid>

                <Grid Grid.Column="2">
                    <Grid >

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="2*" MaxWidth="280" MinWidth="135"/>
                            <ColumnDefinition Width="40" MinWidth="40"/>
                            <ColumnDefinition Width="1*" MinWidth="0"/>
                        </Grid.ColumnDefinitions>

                        <TextBox x:Name="SearchTB"
                                 Grid.Column="0"
                                 Style="{StaticResource TB_Search}"
                                 Margin="10,0"
                                 WindowChrome.IsHitTestVisibleInChrome="True"   
                                 Height="28">

                            <!--<ib:Interaction.Triggers>
                                <ib:EventTrigger EventName="TextChanged">
                                    <ib:InvokeCommandAction Command="{Binding EmptySearchTextCheckCommand}"
                                                        CommandParameter="{Binding ElementName=SearchTB,
                                                                                   Path=Text}"/>
                                </ib:EventTrigger>
                            </ib:Interaction.Triggers>-->

                        </TextBox>
                        <Button Grid.Column="1"
                                Style="{DynamicResource SearchButton}"
                                CommandParameter="{Binding ElementName=SearchTB,
                                                           Path=Text}"
                                WindowChrome.IsHitTestVisibleInChrome="True"   />
                    </Grid>


                </Grid>
                
                <Grid Grid.Column="3" Background="{x:Null}">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center">
                        <mfbuttonuc:MFButton x:Name="GcButton"
                                             TextData="GC"
                                             WindowChrome.IsHitTestVisibleInChrome="True"
                                             Command="{Binding ShowExecutableMethodCommand}"
                                             Background="{StaticResource GrayLVL4}"/>
                        <mfbuttonuc:MFButton x:Name="DebugButton"
                                             IconKind="MessageAlertOutline"
                                             WindowChrome.IsHitTestVisibleInChrome="True"
                                             Command="{Binding ShowExecutableMethodCommand}"
                                             Background="{StaticResource GrayLVL4}"/>
                        <mfbuttonuc:MFButton x:Name="SettingsButton"
                                             IconKind="Menu"
                                             WindowChrome.IsHitTestVisibleInChrome="True"
                                             Background="{StaticResource GrayLVL4}"/>
                        <!--Command="{Binding OpenSettingsCommand}"-->
                        <Button x:Name="MinimizeButton"
                                WindowChrome.IsHitTestVisibleInChrome="True"      
                                Command="{Binding MinimizedWindowCommand}"
                                Background="{StaticResource GrayLVL4}"
                                Style="{StaticResource MinimizeWindowButton}"/>

                        <Button x:Name="ResizeButton"
                                WindowChrome.IsHitTestVisibleInChrome="True"      
                                Command="{Binding ResizeWindowCommand}"
                                Background="{DynamicResource GrayLVL4}"
                                Style="{StaticResource ResizeWindowButton}"/>

                        <Button x:Name="CloseButton"
                                WindowChrome.IsHitTestVisibleInChrome="True"      
                                Command="{Binding CloseWindowCommand}"
                                Background="{DynamicResource GrayLVL4}"
                                Style="{StaticResource CloseWindowButton}"/>
                    </StackPanel>
                </Grid>

            </Grid>

        </Border>

        <Border x:Name="MenuGrid" Grid.Row="1" Grid.Column="0"
                BorderBrush="{DynamicResource GrayLVL0}"
                BorderThickness="0,0,0.25,0">

            <Grid Background="{StaticResource GrayLVL3}">

                <Grid.RowDefinitions>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <Border Grid.Row="0"
                        BorderThickness="0,0,0,1"
                        BorderBrush="{DynamicResource GrayLVL0}">
                    <Grid>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <Button Grid.Column="0"
                                Background="{DynamicResource GrayLVL4WithLowOpacity}"
                                Style="{DynamicResource ChooseTagButton}">
                            <ib:Interaction.Triggers>
                                <ib:EventTrigger EventName="Click">
                                    <ib:ChangePropertyAction TargetName="FolderTreeView" PropertyName="Visibility" Value="Hidden"/>
                                    <ib:ChangePropertyAction TargetName="TagListBox" PropertyName="Visibility" Value="Visible"/>
                                </ib:EventTrigger>
                            </ib:Interaction.Triggers>
                        </Button>

                        <Button Grid.Column="1"
                                Background="{DynamicResource GrayLVL4WithLowOpacity}"
                                Style="{DynamicResource ChooseFolderButton}">
                            <ib:Interaction.Triggers>
                                <ib:EventTrigger EventName="Click">
                                    <ib:ChangePropertyAction TargetName="FolderTreeView" PropertyName="Visibility" Value="Visible"/>
                                    <ib:ChangePropertyAction TargetName="TagListBox" PropertyName="Visibility" Value="Hidden"/>
                                </ib:EventTrigger>
                            </ib:Interaction.Triggers>
                        </Button>
                        
                    </Grid>
                </Border>
               
                <TreeView Grid.Row="1" x:Name="FolderTreeView"
                          ItemsSource="{Binding Source={StaticResource root}}"
                          Foreground="{DynamicResource StandartLightColor2}"
                          Style="{StaticResource TreeViewFolders}"
                          Visibility="Hidden"
                          Margin="10"/>

                <Grid Grid.Row="1" x:Name="TagListBox"
                      Visibility="Visible">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="25"/>
                    </Grid.RowDefinitions>
                    
                    <ListBox Grid.Row="0"
                             ItemsSource="{Binding MemeTags}"
                             Style="{DynamicResource LeftMenuTagList}"/>
                    
                    <Button Style="{DynamicResource LeftMenuAddNewTagButton}" Grid.Row="1"
                            Command="{Binding MemeTagAddCommand}"/>
                </Grid>
               
            </Grid>

        </Border>

        <Border x:Name="FooterGrid" Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2"
                Background="{StaticResource GrayLVL4}"
                BorderBrush="{DynamicResource GrayLVL0}"
                BorderThickness="0,0.25,0,0">

            <Grid>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="300"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Grid Grid.Column="1">

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="130"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="20"/>
                    </Grid.ColumnDefinitions>

                    <!--<Button Style="{DynamicResource AddNewTagButton}" Grid.Column="0"
                            Command="{Binding MemeTagAddCommand}"/>

                    <ListBox ItemsSource="{Binding MemeTags}" Grid.Column="1"
                             Style="{DynamicResource FooterTagList}"
                             Background="{DynamicResource GrayLVL4}"/>-->
                </Grid>
            </Grid>

        </Border>

        <!--<Grid Grid.Row="1" Grid.Column="1"
              dd:DragDrop.IsDropTarget="True"
              dd:DragDrop.DropHandler="{Binding}">
            
        </Grid>-->
        
        <md:DialogHost Grid.Column="0" Grid.Row="0" Grid.RowSpan="3" Grid.ColumnSpan="3"
                       CloseOnClickAway="True"
                       Identifier="RootDialog"/>

        <Grid Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" Grid.RowSpan="3">
            <uib:UIBlocker IsLoading="{Binding IsBusy, UpdateSourceTrigger=PropertyChanged}"/>
        </Grid>
    </Grid>
</Window>
