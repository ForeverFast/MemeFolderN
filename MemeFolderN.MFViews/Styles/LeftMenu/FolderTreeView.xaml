<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:ib="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:cn="clr-namespace:MemeFolderN.MFViews.Converters"
                    xmlns:ext="clr-namespace:MemeFolderN.MFViews.Extentions"
                    xmlns:vm="clr-namespace:MemeFolderN.MFViewModels.Wpf;assembly=MemeFolderN.MFViewModels.Wpf"
                    xmlns:routedCommands="clr-namespace:MemeFolderN.MFViewModels.Wpf.RoutedCommands;assembly=MemeFolderN.MFViewModels.Wpf"
                    >
    
    <cn:BindingTagSourceCollectionConverter x:Key="BTS"/>

    <HierarchicalDataTemplate DataType="{x:Type vm:FolderVM}"
                              ItemsSource="{Binding Folders, UpdateSourceTrigger=PropertyChanged}">

        <Border Height="25"
                HorizontalAlignment="Stretch">

            <Border.InputBindings>
                <MouseBinding Gesture="LeftDoubleClick"
                                          CommandParameter="{Binding}"
                                          Command="{x:Static routedCommands:FolderRoutedCommands.NavigationByFolderRoutedCommand}"/>
            </Border.InputBindings>

            <Border.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Открыть"
                                CommandParameter="{Binding}"
                                Command="{x:Static routedCommands:FolderRoutedCommands.NavigationByFolderRoutedCommand}"/>
                    <MenuItem Header="Создать папку"
                                CommandParameter="{Binding}"
                                Command="{x:Static routedCommands:FolderRoutedCommands.FolderAddNonParametersRoutedCommand}"/>
                    <MenuItem Header="Создать папку с параметрами"
                                CommandParameter="{Binding}"
                                Command="{x:Static routedCommands:FolderRoutedCommands.FolderAddRoutedCommand}"/>
                    <MenuItem Header="Изменить"
                                CommandParameter="{Binding}"
                                Command="{x:Static routedCommands:FolderRoutedCommands.FolderChangeRoutedCommand}"/>
                    <MenuItem Header="Удалить" 
                                CommandParameter="{Binding}"
                                Command="{x:Static routedCommands:FolderRoutedCommands.FolderDeleteRoutedCommand}"/>
                </ContextMenu>
            </Border.ContextMenu>


            <TextBlock Text="{Binding Title}"
                        FontSize="14"
                        VerticalAlignment="Center"/>
        </Border>

    </HierarchicalDataTemplate>

    <Style x:Key="ExpandCollapseToggleStyle"
          TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />

        <Setter Property="Width" Value="17" />
        <Setter Property="Height" Value="17" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Border Width="17"
                            Height="17"
                            SnapsToDevicePixels="true"
                            Background="{DynamicResource GrayLVL4WithLowOpacity}"
                            BorderBrush="{DynamicResource GrayLVL4WithLowOpacity}"
                            BorderThickness="1">
                        <Grid Background="{x:Null}">
                            <md:PackIcon x:Name="ExpandImg"
                                         Kind="Folder"
                                         Foreground="{TemplateBinding Foreground}"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Kind" TargetName="ExpandImg" Value="FolderOpen" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="{DynamicResource GrayLVL4WithLowOpacity}" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="Foreground" Value="{DynamicResource StandartLightColor2}" />
        <!--<Setter Property="FocusVisualStyle" Value="{DynamicResource TreeViewItemFocusVisual}" />
        Binding Path="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}, Path=DataContext.Folders}"/>-->

        <Setter Property="Tag">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource BTS}">
                    <Binding RelativeSource="{RelativeSource Self}"/>
                    <Binding Path="(ext:Handlers.OnChildrenNodeFilter)"/>
                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=TreeView}"
                             Path="DataContext.Folders"/>
                    <Binding Path="Id"/>
                </MultiBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemsSource" Value="{Binding Tag.View, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">

                    <Grid Background="{DynamicResource GrayLVL4WithLowOpacity}"
                          HorizontalAlignment="Stretch">
                        
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto" />
                            <ColumnDefinition MinWidth="150" Width="*" />
                            <!--<ColumnDefinition Width="*" />-->
                        </Grid.ColumnDefinitions>
                        
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{DynamicResource GrayLVL2_Color}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="SelectedInactive">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{DynamicResource GrayLVL1_Color}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="ItemsHost">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Collapsed" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        
                        <ToggleButton x:Name="Expander"
                                      Foreground="{DynamicResource StandartLightColor2}"
                                      Style="{DynamicResource ExpandCollapseToggleStyle}"
                                      ClickMode="Press"
                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>

                        <Border x:Name="Bd"
                                Grid.Column="1"
                                HorizontalAlignment="Stretch"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}">

                            <ib:Interaction.Triggers>
                                <ib:EventTrigger EventName="MouseLeftButtonDown">
                                    <ib:ChangePropertyAction TargetName="Expander" PropertyName="IsChecked" Value="True"/>
                                    <ib:InvokeCommandAction Command="{Binding DataContext.NavigationByFolderCommand,
                                        RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}"
                                                            CommandParameter="{Binding}"/>
                                </ib:EventTrigger>
                            </ib:Interaction.Triggers>

                            <ContentPresenter x:Name="PART_Header"
                                              ContentSource="Header"
                                              HorizontalAlignment="Stretch"/>

                        </Border>

                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Visibility="Collapsed" />
                        <!--Grid.ColumnSpan="2"-->
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource GrayLVL0}"/>
                        </Trigger>

                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="Expander" Property="Foreground" Value="{DynamicResource GrayLVL0}" />
                        </Trigger>

                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="HasItems" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Expander" Property="Foreground" Value="{DynamicResource GrayLVL0}" />
                            <Setter TargetName="Expander" Property="IsChecked" Value="False" />
                            <Setter TargetName="Expander" Property="IsEnabled" Value="False" />
                        </MultiTrigger>-->

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="False" />
                                <Condition Property="Width" Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="False" />
                                <Condition Property="Height" Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewFolders" TargetType="{x:Type TreeView}">

        <Setter Property="ItemContainerStyle" Value="{StaticResource TreeViewItemStyle}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ItemsControl">

                    <ScrollViewer Style="{DynamicResource ContentSV}"
                                          ScrollViewer.HorizontalScrollBarVisibility="Auto">
                        <ItemsPresenter />
                    </ScrollViewer>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Header="Создать папку"
                              Command="{x:Static routedCommands:FolderRoutedCommands.FolderAddNonParametersRoutedCommand}"/>
                    <MenuItem Header="Создать папку с параметрами"
                              Command="{x:Static routedCommands:FolderRoutedCommands.FolderAddRoutedCommand}"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>

    </Style>
    
</ResourceDictionary>